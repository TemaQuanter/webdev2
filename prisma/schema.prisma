generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model cart {
  user_id         Int
  product_id      Int
  number_of_items Int
  products        products @relation(fields: [product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction)
  users           users    @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, product_id])
}

model categories {
  category_id Int        @id @default(autoincrement())
  name        String     @db.VarChar(100)
  products    products[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model product_ratings {
  product_id Int
  buyer_id   Int
  rating     Int

  @@id([product_id, buyer_id])
}

model products {
  product_id      Int         @id @default(autoincrement())
  seller_id       Int
  title           String      @db.VarChar(100)
  description     String
  category_id     Int
  image           Bytes
  price           Decimal     @db.Decimal(10, 2)
  number_of_items Int
  cart            cart[]
  categories      categories  @relation(fields: [category_id], references: [category_id], onDelete: NoAction, onUpdate: NoAction)
  users           users       @relation(fields: [seller_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  purchases       purchases[]
}

model purchases {
  purchase_id                      Int      @id @default(autoincrement())
  buyer_id                         Int
  seller_id                        Int
  product_id                       Int
  number_of_items                  Int
  purchase_date                    DateTime @db.Date
  users_purchases_buyer_idTousers  users    @relation("purchases_buyer_idTousers", fields: [buyer_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  products                         products @relation(fields: [product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction)
  users_purchases_seller_idTousers users    @relation("purchases_seller_idTousers", fields: [seller_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  user_id                              Int              @id @default(autoincrement())
  first_name                           String           @db.VarChar(50)
  last_name                            String           @db.VarChar(50)
  email                                String           @unique @db.VarChar(100)
  password                             String           @db.VarChar(200)
  profile_picture                      Bytes?
  balance                              Decimal          @db.Decimal(10, 2)
  authentication                       authentication[]
  cart                                 cart[]
  products                             products[]
  purchases_purchases_buyer_idTousers  purchases[]      @relation("purchases_buyer_idTousers")
  purchases_purchases_seller_idTousers purchases[]      @relation("purchases_seller_idTousers")
  verification                         verification?
}

model authentication {
  auth_id       Int      @id @default(autoincrement())
  user_id       Int
  refresh_token String
  created_at    DateTime @default(now()) @db.Timestamp(6)
  users         users    @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model verification {
  user_id           Int     @id
  email_is_verified Boolean @default(false)
  users             users   @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}
